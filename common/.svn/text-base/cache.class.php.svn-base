<?
class cache {

	/**
	 * Tempo padrуo de cache
	 * 
	 * @var string
	 */
	private static $time =  null ;
	
	/**
	 * Local onde o cache serс salvo
	 * 
	 * Definido pelo construtor
	 * 
	 * @var string
	 */
	public $folder  = null ;

	/**
	 * Construtor
	 * 
	 * Inicializa a classe e permite a definiчуo de onde os arquivos
	 * serуo salvos. Se o parтmetro $folder for ignorado o local dos
	 * arquivos temporсrios do sistema operacional serс usado
	 * 
	 * @uses Cache::setFolder() Para definir o local dos arquivos de cache
	 * 
	 * @param string $folder Local para salvar os arquivos de cache (opcional)
	 * 
	 * @return void
	 */
	public function __construct() {
	
		$this->time = CACHE_LIFE_TIME ;
		
		
		$this->setFolder(!is_null($this->folder) ? $this->folder : sys_get_temp_dir()) ;
	}
	
	/**
	 * Define onde os arquivos de cache serуo salvos
	 * 
	 * Irс verificar se a pasta existe e pode ser escrita, caso contrсrio
	 * uma mensagem de erro serс exibida
	 * 
	 * @param string $folder Local para salvar os arquivos de cache (opcional)
	 * 
	 * @return void
	 */
	protected function setFolder() {
		
		// Se a pasta existir, for uma pasta e puder ser escrita
		if (file_exists(  CACHE_DIR ) && is_dir(  CACHE_DIR ) && is_writable(  CACHE_DIR ) ) {
			$this->folder = CACHE_DIR ;
		} else {
			die( 'Nуo foi possэvel acessar a pasta de cache' .  E_USER_ERROR );
		}
	}
	
	/**
	 * Gera o local do arquivo de cache baseado na chave passada
	 * 
	 * @param string $key Uma chave para identificar o arquivo
	 * 
	 * @return string Local do arquivo de cache
	 */
	protected function generateFileLocation( $key ) {
		return $this->folder . DIRECTORY_SEPARATOR . sha1( $key ) . '.tmp' ;
	}
	
	/**
	 * Cria um arquivo de cache
	 * 
	 * @uses Cache::generateFileLocation() para gerar o local do arquivo de cache
	 * 
	 * @param string $key Uma chave para identificar o arquivo
	 * @param string $content Conteњdo do arquivo de cache
	 * 
	 * @return boolean Se o arquivo foi criado
	 */
	protected function createCacheFile( $key, $content ) {
		// Gera o nome do arquivo
		$filename = $this->generateFileLocation( $key ) ;
		
		// Cria o arquivo com o conteњdo
		return file_put_contents( $filename, $content ) ;

	}
	
	/**
	 * Salva um valor no cache
	 * 
	 * @uses Cache::createCacheFile() para criar o arquivo com o cache
	 * 
	 * @param string $key Uma chave para identificar o valor cacheado
	 * @param mixed $content Conteњdo/variсvel a ser salvo(a) no cache
	 * @param string $time Quanto tempo atщ o cache expirar (opcional)
	 * 
	 * @return boolean Se o cache foi salvo
	 */
	public function save( $key, $content, $time = null ) {
		$time = strtotime( !is_null($time) ? $time : $this->time );
			
		$content = serialize(array(
			'expires' => $time,
			'content' => $content));
		
		return $this->createCacheFile($key, $content);
	}
	
	
	/**
	 * Salva um valor do cache
	 * 
	 * @uses Cache::generateFileLocation() para gerar o local do arquivo de cache
	 * 
	 * @param string $key Uma chave para identificar o valor cacheado
	 * 
	 * @return mixed Se o cache foi encontrado retorna o seu valor, caso contrсrio retorna NULL
	 */
	public function read( $key ) {
		
		if( isset( $_GET{"cache"} ) && $_GET{"cache"} == "no" ){
			return false ;
		}
		$filename = $this->generateFileLocation( $key ) ;
		if (file_exists($filename) && is_readable($filename)) {
			$cache = unserialize(file_get_contents($filename)) ;
			if ( $cache['expires'] > time() ) {
				return $cache['content'];
			}
		}
		return false ;
	}
}
?>